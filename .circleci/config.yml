version: 2.1

orbs:
  win: circleci/windows@5.0
  node: circleci/node@5.0.2

executors:
  linux:
    docker:
      - image: cimg/rust:1.62.0-node
    resource_class: medium
  website:
    docker:
      - image: cimg/rust:1.62.0-node
    resource_class: medium
  mac:
    macos:
      xcode: "14.0.0"
    resource_class: medium
  macm1:
    macos:
      xcode: "14.0.0"
    resource_class: medium
  windows: win/default
  node: node/default

jobs:
  build:
    parameters:
      os:
        type: string
    executor: <<parameters.os>>
    steps:
      - checkout
      # MACOS
      - when:
          condition:
            and:
              - equal: ["mac", <<parameters.os>>]
          steps:
            - run: |
                curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
                source "$HOME/.cargo/env"
                rustup toolchain install nightly
                rustup target add x86_64-apple-darwin --toolchain nightly
                rustup default nightly
                node -v
                cargo --version
                sudo npm i -g pnpm
                pnpm i
                chmod -R a+x node_modules
            - run: |
                pnpm build-mac-x64
                pnpm test
            - store_artifacts:
                path: ./apps/desktop
      # MACOS M1
      - when:
          condition:
            and:
              - equal: ["macm1", <<parameters.os>>]
          steps:
            - run: |
                curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
                source "$HOME/.cargo/env"
                rustup toolchain install nightly
                rustup target add aarch64-apple-darwin --toolchain nightly
                rustup default nightly
                node -v
                cargo --version
                sudo npm i -g pnpm
                pnpm i
                chmod -R a+x node_modules
            - run: |
                pnpm build-mac-arm64
                pnpm test
      # LINUX
      - when:
          condition:
            and:
              - equal: ["linux", <<parameters.os>>]
          steps:
            - run: |
                rustup toolchain install nightly
                rustup target add x86_64-unknown-linux-gnu --toolchain nightly
                rustup default nightly
                node -v
                cargo --version
                sudo npm i -g pnpm
                pnpm i
                chmod -R a+x node_modules
            - run: pnpm build-linux-x64
            - run:
                command: |
                  sudo apt-get install -y x11vnc
                  x11vnc -forever -nopw
                background: true
            - run: pnpm test
      # LINUX WEBSITE
      - when:
          condition:
            and:
              - equal: ["website", <<parameters.os>>]
          steps:
            - run: |
                node -v
                sudo npm i -g pnpm
                pnpm i
                chmod -R a+x node_modules
            # - run: pnpm test
            - run: pnpm build-web
  buildWin:
    working_directory: ./
    executor:
      name: win/default
      size: medium
    steps:
      - checkout
      - run:
          name: Install NVM
          shell: powershell.exe
          command: choco install nvm -y
      - run:
          name: Install Node 16.16.0
          shell: powershell.exe
          command: |
              nvm list
              nvm install 16.16.0
              nvm use 16.16.0
      - run:
          name: Verify Node Version
          shell: powershell.exe
          command: node --version
      - run:
          name: "Install Rust"
          shell: powershell.exe
          command: |
            $ProgressPreference = 'Continue'    
            Invoke-WebRequest -Uri "https://win.rustup.rs/" -OutFile "C:\rustup-init.exe"
            & C:\rustup-init.exe -y --default-toolchain "nightly-x86_64-pc-windows-msvc" --no-modify-path --profile minimal
            $env:path += ";$env:userprofile\.cargo\bin"

            rustc -Vv
            node -v
            cargo --version
            rustc --version | Out-File -FilePath "rust-version"
            if (!(Test-Path "Cargo.lock" -PathType Leaf)) {
                cargo generate-lockfile
            }
      - run: |
          $env:path += ";$env:userprofile\.cargo\bin;$env:appdata\npm"
          npm i -g pnpm
          pnpm i
      - run: pnpm build-win-x64
      - run: pnpm test
      # - store_artifacts:
      #     path: ./apps/desktop/release
workflows:
  all-builds:
    jobs:
      - build:
          filters:
            branches:
              only:
                - master
          matrix:
            parameters:
              os: ["linux", "mac", "macm1", "website"]
      - buildWin:
          filters:
            branches:
              only:
                - master
                